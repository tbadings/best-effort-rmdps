mdp

module grid
    x : [0..4];
    y : [0..4];
    [right_be] x=0 & y=0 -> [0.747, 0.927]: (x'=1) & (y'=0) + [0.07300000000000001, 0.253]: (x'=0) & (y'=0);
    [right] x=0 & y=0 -> [0.747, 0.747]: (x'=1) & (y'=0) + [0.253, 0.253]: (x'=0) & (y'=0);
    [down_be] x=0 & y=1 -> [0.728, 0.872]: (x'=0) & (y'=2) + [0.128, 0.272]: (x'=0) & (y'=1);
    [down] x=0 & y=1 -> [0.728, 0.728]: (x'=0) & (y'=2) + [0.272, 0.272]: (x'=0) & (y'=1);
    [right_be] x=0 & y=2 -> [0.794, 0.923]: (x'=1) & (y'=2) + [0.07700000000000001, 0.20600000000000002]: (x'=0) & (y'=2);
    [right] x=0 & y=2 -> [0.794, 0.794]: (x'=1) & (y'=2) + [0.20600000000000002, 0.20600000000000002]: (x'=0) & (y'=2);
    [up_be] x=0 & y=3 -> [0.722, 0.9359999999999999]: (x'=0) & (y'=2) + [0.064, 0.278]: (x'=0) & (y'=3);
    [up] x=0 & y=3 -> [0.722, 0.722]: (x'=0) & (y'=2) + [0.278, 0.278]: (x'=0) & (y'=3);
    [pass] x=0 & y=4 -> [1.0, 1.0]: (x'=0) & (y'=0);
    [right_be] x=1 & y=0 -> [0.79, 0.903]: (x'=2) & (y'=0) + [0.097, 0.21]: (x'=1) & (y'=0);
    [right] x=1 & y=0 -> [0.79, 0.79]: (x'=2) & (y'=0) + [0.21, 0.21]: (x'=1) & (y'=0);
    [right_be] x=1 & y=1 -> [0.742, 0.92]: (x'=2) & (y'=1) + [0.08, 0.258]: (x'=1) & (y'=1);
    [right] x=1 & y=1 -> [0.742, 0.742]: (x'=2) & (y'=1) + [0.258, 0.258]: (x'=1) & (y'=1);
    [right_be] x=1 & y=2 -> [0.723, 0.896]: (x'=2) & (y'=2) + [0.10400000000000001, 0.277]: (x'=1) & (y'=2);
    [right] x=1 & y=2 -> [0.723, 0.723]: (x'=2) & (y'=2) + [0.277, 0.277]: (x'=1) & (y'=2);
    [right_be] x=1 & y=3 -> [0.746, 0.912]: (x'=2) & (y'=3) + [0.08800000000000001, 0.254]: (x'=1) & (y'=3);
    [right] x=1 & y=3 -> [0.746, 0.746]: (x'=2) & (y'=3) + [0.254, 0.254]: (x'=1) & (y'=3);
    [up_be] x=1 & y=4 -> [0.764, 0.874]: (x'=1) & (y'=3) + [0.126, 0.236]: (x'=1) & (y'=4);
    [up] x=1 & y=4 -> [0.764, 0.764]: (x'=1) & (y'=3) + [0.236, 0.236]: (x'=1) & (y'=4);
    [right_be] x=2 & y=0 -> [0.764, 0.944]: (x'=3) & (y'=0) + [0.05600000000000001, 0.236]: (x'=2) & (y'=0);
    [right] x=2 & y=0 -> [0.764, 0.764]: (x'=3) & (y'=0) + [0.236, 0.236]: (x'=2) & (y'=0);
    [right_be] x=2 & y=1 -> [0.742, 0.935]: (x'=3) & (y'=1) + [0.065, 0.258]: (x'=2) & (y'=1);
    [right] x=2 & y=1 -> [0.742, 0.742]: (x'=3) & (y'=1) + [0.258, 0.258]: (x'=2) & (y'=1);
    [right_be] x=2 & y=2 -> [0.753, 0.943]: (x'=3) & (y'=2) + [0.05700000000000001, 0.247]: (x'=2) & (y'=2);
    [right] x=2 & y=2 -> [0.753, 0.753]: (x'=3) & (y'=2) + [0.247, 0.247]: (x'=2) & (y'=2);
    [up_be] x=2 & y=3 -> [0.76, 0.933]: (x'=2) & (y'=2) + [0.067, 0.24]: (x'=2) & (y'=3);
    [up] x=2 & y=3 -> [0.76, 0.76]: (x'=2) & (y'=2) + [0.24, 0.24]: (x'=2) & (y'=3);
    [pass] x=2 & y=4 -> [1.0, 1.0]: (x'=0) & (y'=0);
    [down_be] x=3 & y=0 -> [0.763, 0.908]: (x'=3) & (y'=1) + [0.092, 0.237]: (x'=3) & (y'=0);
    [down] x=3 & y=0 -> [0.763, 0.763]: (x'=3) & (y'=1) + [0.237, 0.237]: (x'=3) & (y'=0);
    [down_be] x=3 & y=1 -> [0.757, 0.907]: (x'=3) & (y'=2) + [0.093, 0.243]: (x'=3) & (y'=1);
    [down] x=3 & y=1 -> [0.757, 0.757]: (x'=3) & (y'=2) + [0.243, 0.243]: (x'=3) & (y'=1);
    [right_be] x=3 & y=2 -> [0.771, 0.937]: (x'=4) & (y'=2) + [0.063, 0.229]: (x'=3) & (y'=2);
    [right] x=3 & y=2 -> [0.771, 0.771]: (x'=4) & (y'=2) + [0.229, 0.229]: (x'=3) & (y'=2);
    [pass] x=3 & y=3 -> [1.0, 1.0]: (x'=0) & (y'=0);
    [right_be] x=3 & y=4 -> [0.702, 0.9299999999999999]: (x'=4) & (y'=4) + [0.07, 0.298]: (x'=3) & (y'=4);
    [right] x=3 & y=4 -> [0.702, 0.702]: (x'=4) & (y'=4) + [0.298, 0.298]: (x'=3) & (y'=4);
    [pass] x=4 & y=0 -> [1.0, 1.0]: (x'=0) & (y'=0);
    [pass] x=4 & y=1 -> [1.0, 1.0]: (x'=0) & (y'=0);
    [down_be] x=4 & y=2 -> [0.778, 0.899]: (x'=4) & (y'=3) + [0.101, 0.222]: (x'=4) & (y'=2);
    [down] x=4 & y=2 -> [0.778, 0.778]: (x'=4) & (y'=3) + [0.222, 0.222]: (x'=4) & (y'=2);
    [down_be] x=4 & y=3 -> [0.784, 0.94]: (x'=4) & (y'=4) + [0.060000000000000005, 0.216]: (x'=4) & (y'=3);
    [down] x=4 & y=3 -> [0.784, 0.784]: (x'=4) & (y'=4) + [0.216, 0.216]: (x'=4) & (y'=3);
    [pass] x=4 & y=4 -> [1.0, 1.0]: (x'=4) & (y'=4);
endmodule

// initial states
init true endinit

// reward structure (number of steps to reach the target)
rewards
    [right] true : 1;
    [right_be] true : 1;
    [up] true : 1;
    [up_be] true : 1;
    [down] true : 1;
    [down_be] true : 1;
    [pass] true : 0;
endrewards

label "goal" = x=4 & y=4;